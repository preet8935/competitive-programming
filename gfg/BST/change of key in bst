node * minValueNode(node* Node)  
{  
    node* current = Node;  
  
    /* loop down to find the leftmost leaf */
    while (current->left != NULL)  
        current = current->left;  
  
    return current;  
}  
  
/* Given a binary search tree and  
a key, this function deletes the key  
and returns the new root */
node* deleteNode(node* root, int key)  
{  
    // base case  
    if (root == NULL) return root;  
  
    // If the key to be deleted is 
    // smaller than the root's key,  
    // then it lies in left subtree  
    if (key < root->key)  
        root->left = deleteNode(root->left, key);  
  
    // If the key to be deleted is  
    // greater than the root's key,  
    // then it lies in right subtree  
    else if (key > root->key)  
        root->right = deleteNode(root->right, key);  
  
    // if key is same as root's  
    // key, then This is the node  
    // to be deleted  
    else
    {  
        // node with only one child or no child  
        if (root->left == NULL)  
        {  
            node *temp = root->right;  
            free(root);  
            return temp;  
        }  
        else if (root->right == NULL)  
        {  
            node *temp = root->left;  
            free(root);  
            return temp;  
        }  
  
        // node with two children: Get  
        // the inorder successor (smallest  
        // in the right subtree)  
        node* temp = minValueNode(root->right);  
  
        // Copy the inorder successor's  
        // content to this node  
        root->key = temp->key;  
  
        // Delete the inorder successor  
        root->right = deleteNode(root->right, temp->key);  
    }  
    return root;  
}  
  
// Function to decrease a key 
// value in Binary Search Tree  
node *changeKey(node *root, int oldVal, int newVal)  
{  
    // First delete old key value  
    root = deleteNode(root, oldVal);  
  
    // Then insert new key value  
    root = insert(root, newVal);  
  
    // Return new root  
    return root;  
}  
